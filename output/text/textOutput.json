{"name":"E:\\graduation\\GraduationProjectPresentation\\GraduationProjectPresentation\\GraduationProjectPresentation\\wwwroot\\uploads\\abac62b4-5ed8-4a1f-8cfa-e55df0a51991.pdf","metadata":{"source":"CRF","title":"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding","authors":["Jacob Devlin","Ming-Wei Chang","Kenton Lee","Kristina Toutanova"],"emails":["jacobdevlin@google.com","mingweichang@google.com","kentonl@google.com","kristout@google.com"],"sections":[{"heading":null,"text":"BERT is conceptually simple and empirically powerful. It obtains new state-of-the-art results on eleven natural language processing tasks, including pushing the GLUE score to 80.5% (7.7% point absolute improvement), MultiNLI accuracy to 86.7% (4.6% absolute improvement), SQuAD v1.1 question answering Test F1 to 93.2 (1.5 point absolute improvement) and SQuAD v2.0 Test F1 to 83.1 (5.1 point absolute improvement)."},{"heading":"1 Introduction","text":"Language model pre-training has been shown to be effective for improving many natural language processing tasks (Dai and Le, 2015; Peters et al., 2018a; Radford et al., 2018; Howard and Ruder, 2018). These include sentence-level tasks such as natural language inference (Bowman et al., 2015; Williams et al., 2018) and paraphrasing (Dolan and Brockett, 2005), which aim to predict the relationships between sentences by analyzing them holistically, as well as token-level tasks such as named entity recognition and question answering, where models are required to produce fine-grained output at the token level (Tjong Kim Sang and De Meulder, 2003; Rajpurkar et al., 2016).\nThere are two existing strategies for applying pre-trained language representations to downstream tasks: feature-based and fine-tuning. The feature-based approach, such as ELMo (Peters et al., 2018a), uses task-specific architectures that include the pre-trained representations as additional features. The fine-tuning approach, such as the Generative Pre-trained Transformer (OpenAI GPT) (Radford et al., 2018), introduces minimal task-specific parameters, and is trained on the downstream tasks by simply fine-tuning all pretrained parameters. The two approaches share the same objective function during pre-training, where they use unidirectional language models to learn general language representations.\nWe argue that current techniques restrict the power of the pre-trained representations, especially for the fine-tuning approaches. The major limitation is that standard language models are unidirectional, and this limits the choice of architectures that can be used during pre-training. For example, in OpenAI GPT, the authors use a left-toright architecture, where every token can only attend to previous tokens in the self-attention layers of the Transformer (Vaswani et al., 2017). Such restrictions are sub-optimal for sentence-level tasks, and could be very harmful when applying finetuning based approaches to token-level tasks such as question answering, where it is crucial to incorporate context from both directions.\nIn this paper, we improve the fine-tuning based approaches by proposing BERT: Bidirectional Encoder Representations from Transformers. BERT alleviates the previously mentioned unidirectionality constraint by using a “masked language model” (MLM) pre-training objective, inspired by the Cloze task (Taylor, 1953). The masked language model randomly masks some of the tokens from the input, and the objective is to predict the original vocabulary id of the masked\nar X\niv :1\n81 0.\n04 80\n5v 2\n[ cs\n.C L\n] 2\n4 M\nay 2\n01 9\nword based only on its context. Unlike left-toright language model pre-training, the MLM objective enables the representation to fuse the left and the right context, which allows us to pretrain a deep bidirectional Transformer. In addition to the masked language model, we also use a “next sentence prediction” task that jointly pretrains text-pair representations. The contributions of our paper are as follows:\n• We demonstrate the importance of bidirectional pre-training for language representations. Unlike Radford et al. (2018), which uses unidirectional language models for pre-training, BERT uses masked language models to enable pretrained deep bidirectional representations. This is also in contrast to Peters et al. (2018a), which uses a shallow concatenation of independently trained left-to-right and right-to-left LMs.\n• We show that pre-trained representations reduce the need for many heavily-engineered taskspecific architectures. BERT is the first finetuning based representation model that achieves state-of-the-art performance on a large suite of sentence-level and token-level tasks, outperforming many task-specific architectures.\n• BERT advances the state of the art for eleven NLP tasks. The code and pre-trained models are available at https://github.com/ google-research/bert."},{"heading":"2 Related Work","text":"There is a long history of pre-training general language representations, and we briefly review the most widely-used approaches in this section."},{"heading":"2.1 Unsupervised Feature-based Approaches","text":"Learning widely applicable representations of words has been an active area of research for decades, including non-neural (Brown et al., 1992; Ando and Zhang, 2005; Blitzer et al., 2006) and neural (Mikolov et al., 2013; Pennington et al., 2014) methods. Pre-trained word embeddings are an integral part of modern NLP systems, offering significant improvements over embeddings learned from scratch (Turian et al., 2010). To pretrain word embedding vectors, left-to-right language modeling objectives have been used (Mnih and Hinton, 2009), as well as objectives to discriminate correct from incorrect words in left and right context (Mikolov et al., 2013).\nThese approaches have been generalized to coarser granularities, such as sentence embeddings (Kiros et al., 2015; Logeswaran and Lee, 2018) or paragraph embeddings (Le and Mikolov, 2014). To train sentence representations, prior work has used objectives to rank candidate next sentences (Jernite et al., 2017; Logeswaran and Lee, 2018), left-to-right generation of next sentence words given a representation of the previous sentence (Kiros et al., 2015), or denoising autoencoder derived objectives (Hill et al., 2016).\nELMo and its predecessor (Peters et al., 2017, 2018a) generalize traditional word embedding research along a different dimension. They extract context-sensitive features from a left-to-right and a right-to-left language model. The contextual representation of each token is the concatenation of the left-to-right and right-to-left representations. When integrating contextual word embeddings with existing task-specific architectures, ELMo advances the state of the art for several major NLP benchmarks (Peters et al., 2018a) including question answering (Rajpurkar et al., 2016), sentiment analysis (Socher et al., 2013), and named entity recognition (Tjong Kim Sang and De Meulder, 2003). Melamud et al. (2016) proposed learning contextual representations through a task to predict a single word from both left and right context using LSTMs. Similar to ELMo, their model is feature-based and not deeply bidirectional. Fedus et al. (2018) shows that the cloze task can be used to improve the robustness of text generation models."},{"heading":"2.2 Unsupervised Fine-tuning Approaches","text":"As with the feature-based approaches, the first works in this direction only pre-trained word embedding parameters from unlabeled text (Collobert and Weston, 2008).\nMore recently, sentence or document encoders which produce contextual token representations have been pre-trained from unlabeled text and fine-tuned for a supervised downstream task (Dai and Le, 2015; Howard and Ruder, 2018; Radford et al., 2018). The advantage of these approaches is that few parameters need to be learned from scratch. At least partly due to this advantage, OpenAI GPT (Radford et al., 2018) achieved previously state-of-the-art results on many sentencelevel tasks from the GLUE benchmark (Wang et al., 2018a). Left-to-right language model-\ning and auto-encoder objectives have been used for pre-training such models (Howard and Ruder, 2018; Radford et al., 2018; Dai and Le, 2015)."},{"heading":"2.3 Transfer Learning from Supervised Data","text":"There has also been work showing effective transfer from supervised tasks with large datasets, such as natural language inference (Conneau et al., 2017) and machine translation (McCann et al., 2017). Computer vision research has also demonstrated the importance of transfer learning from large pre-trained models, where an effective recipe is to fine-tune models pre-trained with ImageNet (Deng et al., 2009; Yosinski et al., 2014)."},{"heading":"3 BERT","text":"We introduce BERT and its detailed implementation in this section. There are two steps in our framework: pre-training and fine-tuning. During pre-training, the model is trained on unlabeled data over different pre-training tasks. For finetuning, the BERT model is first initialized with the pre-trained parameters, and all of the parameters are fine-tuned using labeled data from the downstream tasks. Each downstream task has separate fine-tuned models, even though they are initialized with the same pre-trained parameters. The question-answering example in Figure 1 will serve as a running example for this section.\nA distinctive feature of BERT is its unified architecture across different tasks. There is mini-\nmal difference between the pre-trained architecture and the final downstream architecture.\nModel Architecture BERT’s model architecture is a multi-layer bidirectional Transformer encoder based on the original implementation described in Vaswani et al. (2017) and released in the tensor2tensor library.1 Because the use of Transformers has become common and our implementation is almost identical to the original, we will omit an exhaustive background description of the model architecture and refer readers to Vaswani et al. (2017) as well as excellent guides such as “The Annotated Transformer.”2\nIn this work, we denote the number of layers (i.e., Transformer blocks) as L, the hidden size as H , and the number of self-attention heads as A.3 We primarily report results on two model sizes: BERTBASE (L=12, H=768, A=12, Total Parameters=110M) and BERTLARGE (L=24, H=1024, A=16, Total Parameters=340M).\nBERTBASE was chosen to have the same model size as OpenAI GPT for comparison purposes. Critically, however, the BERT Transformer uses bidirectional self-attention, while the GPT Transformer uses constrained self-attention where every token can only attend to context to its left.4\n1https://github.com/tensorflow/tensor2tensor 2http://nlp.seas.harvard.edu/2018/04/03/attention.html 3In all cases we set the feed-forward/filter size to be 4H , i.e., 3072 for the H = 768 and 4096 for the H = 1024. 4We note that in the literature the bidirectional Trans-\nInput/Output Representations To make BERT handle a variety of down-stream tasks, our input representation is able to unambiguously represent both a single sentence and a pair of sentences (e.g., 〈Question, Answer 〉) in one token sequence. Throughout this work, a “sentence” can be an arbitrary span of contiguous text, rather than an actual linguistic sentence. A “sequence” refers to the input token sequence to BERT, which may be a single sentence or two sentences packed together.\nWe use WordPiece embeddings (Wu et al., 2016) with a 30,000 token vocabulary. The first token of every sequence is always a special classification token ([CLS]). The final hidden state corresponding to this token is used as the aggregate sequence representation for classification tasks. Sentence pairs are packed together into a single sequence. We differentiate the sentences in two ways. First, we separate them with a special token ([SEP]). Second, we add a learned embedding to every token indicating whether it belongs to sentence A or sentence B. As shown in Figure 1, we denote input embedding as E, the final hidden vector of the special [CLS] token as C ∈ RH , and the final hidden vector for the ith input token as Ti ∈ RH .\nFor a given token, its input representation is constructed by summing the corresponding token, segment, and position embeddings. A visualization of this construction can be seen in Figure 2."},{"heading":"3.1 Pre-training BERT","text":"Unlike Peters et al. (2018a) and Radford et al. (2018), we do not use traditional left-to-right or right-to-left language models to pre-train BERT. Instead, we pre-train BERT using two unsupervised tasks, described in this section. This step is presented in the left part of Figure 1.\nTask #1: Masked LM Intuitively, it is reasonable to believe that a deep bidirectional model is strictly more powerful than either a left-to-right model or the shallow concatenation of a left-toright and a right-to-left model. Unfortunately, standard conditional language models can only be trained left-to-right or right-to-left, since bidirectional conditioning would allow each word to indirectly “see itself”, and the model could trivially predict the target word in a multi-layered context.\nformer is often referred to as a “Transformer encoder” while the left-context-only version is referred to as a “Transformer decoder” since it can be used for text generation.\nIn order to train a deep bidirectional representation, we simply mask some percentage of the input tokens at random, and then predict those masked tokens. We refer to this procedure as a “masked LM” (MLM), although it is often referred to as a Cloze task in the literature (Taylor, 1953). In this case, the final hidden vectors corresponding to the mask tokens are fed into an output softmax over the vocabulary, as in a standard LM. In all of our experiments, we mask 15% of all WordPiece tokens in each sequence at random. In contrast to denoising auto-encoders (Vincent et al., 2008), we only predict the masked words rather than reconstructing the entire input.\nAlthough this allows us to obtain a bidirectional pre-trained model, a downside is that we are creating a mismatch between pre-training and fine-tuning, since the [MASK] token does not appear during fine-tuning. To mitigate this, we do not always replace “masked” words with the actual [MASK] token. The training data generator chooses 15% of the token positions at random for prediction. If the i-th token is chosen, we replace the i-th token with (1) the [MASK] token 80% of the time (2) a random token 10% of the time (3) the unchanged i-th token 10% of the time. Then, Ti will be used to predict the original token with cross entropy loss. We compare variations of this procedure in Appendix C.2.\nTask #2: Next Sentence Prediction (NSP) Many important downstream tasks such as Question Answering (QA) and Natural Language Inference (NLI) are based on understanding the relationship between two sentences, which is not directly captured by language modeling. In order to train a model that understands sentence relationships, we pre-train for a binarized next sentence prediction task that can be trivially generated from any monolingual corpus. Specifically, when choosing the sentences A and B for each pretraining example, 50% of the time B is the actual next sentence that follows A (labeled as IsNext), and 50% of the time it is a random sentence from the corpus (labeled as NotNext). As we show in Figure 1, C is used for next sentence prediction (NSP).5 Despite its simplicity, we demonstrate in Section 5.1 that pre-training towards this task is very beneficial to both QA and NLI. 6\n5The final model achieves 97%-98% accuracy on NSP. 6The vector C is not a meaningful sentence representation\nwithout fine-tuning, since it was trained with NSP.\nThe NSP task is closely related to representationlearning objectives used in Jernite et al. (2017) and Logeswaran and Lee (2018). However, in prior work, only sentence embeddings are transferred to down-stream tasks, where BERT transfers all parameters to initialize end-task model parameters.\nPre-training data The pre-training procedure largely follows the existing literature on language model pre-training. For the pre-training corpus we use the BooksCorpus (800M words) (Zhu et al., 2015) and English Wikipedia (2,500M words). For Wikipedia we extract only the text passages and ignore lists, tables, and headers. It is critical to use a document-level corpus rather than a shuffled sentence-level corpus such as the Billion Word Benchmark (Chelba et al., 2013) in order to extract long contiguous sequences."},{"heading":"3.2 Fine-tuning BERT","text":"Fine-tuning is straightforward since the selfattention mechanism in the Transformer allows BERT to model many downstream tasks— whether they involve single text or text pairs—by swapping out the appropriate inputs and outputs. For applications involving text pairs, a common pattern is to independently encode text pairs before applying bidirectional cross attention, such as Parikh et al. (2016); Seo et al. (2017). BERT instead uses the self-attention mechanism to unify these two stages, as encoding a concatenated text pair with self-attention effectively includes bidirectional cross attention between two sentences.\nFor each task, we simply plug in the taskspecific inputs and outputs into BERT and finetune all the parameters end-to-end. At the input, sentence A and sentence B from pre-training are analogous to (1) sentence pairs in paraphrasing, (2) hypothesis-premise pairs in entailment, (3) question-passage pairs in question answering, and\n(4) a degenerate text-∅ pair in text classification or sequence tagging. At the output, the token representations are fed into an output layer for tokenlevel tasks, such as sequence tagging or question answering, and the [CLS] representation is fed into an output layer for classification, such as entailment or sentiment analysis.\nCompared to pre-training, fine-tuning is relatively inexpensive. All of the results in the paper can be replicated in at most 1 hour on a single Cloud TPU, or a few hours on a GPU, starting from the exact same pre-trained model.7 We describe the task-specific details in the corresponding subsections of Section 4. More details can be found in Appendix A.5."},{"heading":"4 Experiments","text":"In this section, we present BERT fine-tuning results on 11 NLP tasks."},{"heading":"4.1 GLUE","text":"The General Language Understanding Evaluation (GLUE) benchmark (Wang et al., 2018a) is a collection of diverse natural language understanding tasks. Detailed descriptions of GLUE datasets are included in Appendix B.1.\nTo fine-tune on GLUE, we represent the input sequence (for single sentence or sentence pairs) as described in Section 3, and use the final hidden vector C ∈ RH corresponding to the first input token ([CLS]) as the aggregate representation. The only new parameters introduced during fine-tuning are classification layer weights W ∈ RK×H , whereK is the number of labels. We compute a standard classification loss with C and W , i.e., log(softmax(CW T )).\n7For example, the BERT SQuAD model can be trained in around 30 minutes on a single Cloud TPU to achieve a Dev F1 score of 91.0%.\n8See (10) in https://gluebenchmark.com/faq.\nWe use a batch size of 32 and fine-tune for 3 epochs over the data for all GLUE tasks. For each task, we selected the best fine-tuning learning rate (among 5e-5, 4e-5, 3e-5, and 2e-5) on the Dev set. Additionally, for BERTLARGE we found that finetuning was sometimes unstable on small datasets, so we ran several random restarts and selected the best model on the Dev set. With random restarts, we use the same pre-trained checkpoint but perform different fine-tuning data shuffling and classifier layer initialization.9\nResults are presented in Table 1. Both BERTBASE and BERTLARGE outperform all systems on all tasks by a substantial margin, obtaining 4.5% and 7.0% respective average accuracy improvement over the prior state of the art. Note that BERTBASE and OpenAI GPT are nearly identical in terms of model architecture apart from the attention masking. For the largest and most widely reported GLUE task, MNLI, BERT obtains a 4.6% absolute accuracy improvement. On the official GLUE leaderboard10, BERTLARGE obtains a score of 80.5, compared to OpenAI GPT, which obtains 72.8 as of the date of writing.\nWe find that BERTLARGE significantly outperforms BERTBASE across all tasks, especially those with very little training data. The effect of model size is explored more thoroughly in Section 5.2."},{"heading":"4.2 SQuAD v1.1","text":"The Stanford Question Answering Dataset (SQuAD v1.1) is a collection of 100k crowdsourced question/answer pairs (Rajpurkar et al., 2016). Given a question and a passage from\n9The GLUE data set distribution does not include the Test labels, and we only made a single GLUE evaluation server submission for each of BERTBASE and BERTLARGE.\n10https://gluebenchmark.com/leaderboard\nWikipedia containing the answer, the task is to predict the answer text span in the passage.\nAs shown in Figure 1, in the question answering task, we represent the input question and passage as a single packed sequence, with the question using the A embedding and the passage using the B embedding. We only introduce a start vector S ∈ RH and an end vector E ∈ RH during fine-tuning. The probability of word i being the start of the answer span is computed as a dot product between Ti and S followed by a softmax over all of the words in the paragraph: Pi = e\nS·Ti∑ j e S·Tj .\nThe analogous formula is used for the end of the answer span. The score of a candidate span from position i to position j is defined as S·Ti + E·Tj , and the maximum scoring span where j ≥ i is used as a prediction. The training objective is the sum of the log-likelihoods of the correct start and end positions. We fine-tune for 3 epochs with a learning rate of 5e-5 and a batch size of 32.\nTable 2 shows top leaderboard entries as well as results from top published systems (Seo et al., 2017; Clark and Gardner, 2018; Peters et al., 2018a; Hu et al., 2018). The top results from the SQuAD leaderboard do not have up-to-date public system descriptions available,11 and are allowed to use any public data when training their systems. We therefore use modest data augmentation in our system by first fine-tuning on TriviaQA (Joshi et al., 2017) befor fine-tuning on SQuAD.\nOur best performing system outperforms the top leaderboard system by +1.5 F1 in ensembling and +1.3 F1 as a single system. In fact, our single BERT model outperforms the top ensemble system in terms of F1 score. Without TriviaQA fine-\n11QANet is described in Yu et al. (2018), but the system has improved substantially after publication.\ntuning data, we only lose 0.1-0.4 F1, still outperforming all existing systems by a wide margin.12"},{"heading":"4.3 SQuAD v2.0","text":"The SQuAD 2.0 task extends the SQuAD 1.1 problem definition by allowing for the possibility that no short answer exists in the provided paragraph, making the problem more realistic.\nWe use a simple approach to extend the SQuAD v1.1 BERT model for this task. We treat questions that do not have an answer as having an answer span with start and end at the [CLS] token. The probability space for the start and end answer span positions is extended to include the position of the [CLS] token. For prediction, we compare the score of the no-answer span: snull = S·C + E·C to the score of the best non-null span\n12The TriviaQA data we used consists of paragraphs from TriviaQA-Wiki formed of the first 400 tokens in documents, that contain at least one of the provided possible answers.\nˆsi,j = maxj≥iS·Ti + E·Tj . We predict a non-null answer when ˆsi,j > snull + τ , where the threshold τ is selected on the dev set to maximize F1. We did not use TriviaQA data for this model. We fine-tuned for 2 epochs with a learning rate of 5e-5 and a batch size of 48.\nThe results compared to prior leaderboard entries and top published work (Sun et al., 2018; Wang et al., 2018b) are shown in Table 3, excluding systems that use BERT as one of their components. We observe a +5.1 F1 improvement over the previous best system."},{"heading":"4.4 SWAG","text":"The Situations With Adversarial Generations (SWAG) dataset contains 113k sentence-pair completion examples that evaluate grounded commonsense inference (Zellers et al., 2018). Given a sentence, the task is to choose the most plausible continuation among four choices.\nWhen fine-tuning on the SWAG dataset, we construct four input sequences, each containing the concatenation of the given sentence (sentence A) and a possible continuation (sentence B). The only task-specific parameters introduced is a vector whose dot product with the [CLS] token representation C denotes a score for each choice which is normalized with a softmax layer.\nWe fine-tune the model for 3 epochs with a learning rate of 2e-5 and a batch size of 16. Results are presented in Table 4. BERTLARGE outperforms the authors’ baseline ESIM+ELMo system by +27.1% and OpenAI GPT by 8.3%."},{"heading":"5 Ablation Studies","text":"In this section, we perform ablation experiments over a number of facets of BERT in order to better understand their relative importance. Additional\nablation studies can be found in Appendix C."},{"heading":"5.1 Effect of Pre-training Tasks","text":"We demonstrate the importance of the deep bidirectionality of BERT by evaluating two pretraining objectives using exactly the same pretraining data, fine-tuning scheme, and hyperparameters as BERTBASE:\nNo NSP: A bidirectional model which is trained using the “masked LM” (MLM) but without the “next sentence prediction” (NSP) task. LTR & No NSP: A left-context-only model which is trained using a standard Left-to-Right (LTR) LM, rather than an MLM. The left-only constraint was also applied at fine-tuning, because removing it introduced a pre-train/fine-tune mismatch that degraded downstream performance. Additionally, this model was pre-trained without the NSP task. This is directly comparable to OpenAI GPT, but using our larger training dataset, our input representation, and our fine-tuning scheme.\nWe first examine the impact brought by the NSP task. In Table 5, we show that removing NSP hurts performance significantly on QNLI, MNLI, and SQuAD 1.1. Next, we evaluate the impact of training bidirectional representations by comparing “No NSP” to “LTR & No NSP”. The LTR model performs worse than the MLM model on all tasks, with large drops on MRPC and SQuAD.\nFor SQuAD it is intuitively clear that a LTR model will perform poorly at token predictions, since the token-level hidden states have no rightside context. In order to make a good faith attempt at strengthening the LTR system, we added a randomly initialized BiLSTM on top. This does significantly improve results on SQuAD, but the\nresults are still far worse than those of the pretrained bidirectional models. The BiLSTM hurts performance on the GLUE tasks.\nWe recognize that it would also be possible to train separate LTR and RTL models and represent each token as the concatenation of the two models, as ELMo does. However: (a) this is twice as expensive as a single bidirectional model; (b) this is non-intuitive for tasks like QA, since the RTL model would not be able to condition the answer on the question; (c) this it is strictly less powerful than a deep bidirectional model, since it can use both left and right context at every layer."},{"heading":"5.2 Effect of Model Size","text":"In this section, we explore the effect of model size on fine-tuning task accuracy. We trained a number of BERT models with a differing number of layers, hidden units, and attention heads, while otherwise using the same hyperparameters and training procedure as described previously.\nResults on selected GLUE tasks are shown in Table 6. In this table, we report the average Dev Set accuracy from 5 random restarts of fine-tuning. We can see that larger models lead to a strict accuracy improvement across all four datasets, even for MRPC which only has 3,600 labeled training examples, and is substantially different from the pre-training tasks. It is also perhaps surprising that we are able to achieve such significant improvements on top of models which are already quite large relative to the existing literature. For example, the largest Transformer explored in Vaswani et al. (2017) is (L=6, H=1024, A=16) with 100M parameters for the encoder, and the largest Transformer we have found in the literature is (L=64, H=512, A=2) with 235M parameters (Al-Rfou et al., 2018). By contrast, BERTBASE contains 110M parameters and BERTLARGE contains 340M parameters.\nIt has long been known that increasing the model size will lead to continual improvements on large-scale tasks such as machine translation and language modeling, which is demonstrated by the LM perplexity of held-out training data shown in Table 6. However, we believe that this is the first work to demonstrate convincingly that scaling to extreme model sizes also leads to large improvements on very small scale tasks, provided that the model has been sufficiently pre-trained. Peters et al. (2018b) presented\nmixed results on the downstream task impact of increasing the pre-trained bi-LM size from two to four layers and Melamud et al. (2016) mentioned in passing that increasing hidden dimension size from 200 to 600 helped, but increasing further to 1,000 did not bring further improvements. Both of these prior works used a featurebased approach — we hypothesize that when the model is fine-tuned directly on the downstream tasks and uses only a very small number of randomly initialized additional parameters, the taskspecific models can benefit from the larger, more expressive pre-trained representations even when downstream task data is very small."},{"heading":"5.3 Feature-based Approach with BERT","text":"All of the BERT results presented so far have used the fine-tuning approach, where a simple classification layer is added to the pre-trained model, and all parameters are jointly fine-tuned on a downstream task. However, the feature-based approach, where fixed features are extracted from the pretrained model, has certain advantages. First, not all tasks can be easily represented by a Transformer encoder architecture, and therefore require a task-specific model architecture to be added. Second, there are major computational benefits to pre-compute an expensive representation of the training data once and then run many experiments with cheaper models on top of this representation.\nIn this section, we compare the two approaches by applying BERT to the CoNLL-2003 Named Entity Recognition (NER) task (Tjong Kim Sang and De Meulder, 2003). In the input to BERT, we use a case-preserving WordPiece model, and we include the maximal document context provided by the data. Following standard practice, we formulate this as a tagging task but do not use a CRF\nlayer in the output. We use the representation of the first sub-token as the input to the token-level classifier over the NER label set.\nTo ablate the fine-tuning approach, we apply the feature-based approach by extracting the activations from one or more layers without fine-tuning any parameters of BERT. These contextual embeddings are used as input to a randomly initialized two-layer 768-dimensional BiLSTM before the classification layer.\nResults are presented in Table 7. BERTLARGE performs competitively with state-of-the-art methods. The best performing method concatenates the token representations from the top four hidden layers of the pre-trained Transformer, which is only 0.3 F1 behind fine-tuning the entire model. This demonstrates that BERT is effective for both finetuning and feature-based approaches."},{"heading":"6 Conclusion","text":"Recent empirical improvements due to transfer learning with language models have demonstrated that rich, unsupervised pre-training is an integral part of many language understanding systems. In particular, these results enable even low-resource tasks to benefit from deep unidirectional architectures. Our major contribution is further generalizing these findings to deep bidirectional architectures, allowing the same pre-trained model to successfully tackle a broad set of NLP tasks."},{"heading":"Appendix for “BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding”","text":"We organize the appendix into three sections:\n• Additional implementation details for BERT are presented in Appendix A;\n• Additional details for our experiments are presented in Appendix B; and\n• Additional ablation studies are presented in Appendix C.\nWe present additional ablation studies for BERT including:\n– Effect of Number of Training Steps; and – Ablation for Different Masking Proce-\ndures."},{"heading":"A Additional Details for BERT","text":"A.1 Illustration of the Pre-training Tasks\nWe provide examples of the pre-training tasks in the following.\nMasked LM and the Masking Procedure Assuming the unlabeled sentence is my dog is hairy, and during the random masking procedure we chose the 4-th token (which corresponding to hairy), our masking procedure can be further illustrated by\n• 80% of the time: Replace the word with the [MASK] token, e.g., my dog is hairy → my dog is [MASK]\n• 10% of the time: Replace the word with a random word, e.g., my dog is hairy → my dog is apple\n• 10% of the time: Keep the word unchanged, e.g., my dog is hairy → my dog is hairy. The purpose of this is to bias the representation towards the actual observed word.\nThe advantage of this procedure is that the Transformer encoder does not know which words it will be asked to predict or which have been replaced by random words, so it is forced to keep a distributional contextual representation of every input token. Additionally, because random replacement only occurs for 1.5% of all tokens (i.e., 10% of 15%), this does not seem to harm the model’s language understanding capability. In Section C.2, we evaluate the impact this procedure.\nCompared to standard langauge model training, the masked LM only make predictions on 15% of tokens in each batch, which suggests that more pre-training steps may be required for the model\nto converge. In Section C.1 we demonstrate that MLM does converge marginally slower than a leftto-right model (which predicts every token), but the empirical improvements of the MLM model far outweigh the increased training cost.\nNext Sentence Prediction The next sentence prediction task can be illustrated in the following examples.\nInput = [CLS] the man went to [MASK] store [SEP]\nhe bought a gallon [MASK] milk [SEP]\nLabel = IsNext\nInput = [CLS] the man [MASK] to the store [SEP]\npenguin [MASK] are flight ##less birds [SEP]\nLabel = NotNext\nA.2 Pre-training Procedure\nTo generate each training input sequence, we sample two spans of text from the corpus, which we refer to as “sentences” even though they are typically much longer than single sentences (but can be shorter also). The first sentence receives the A embedding and the second receives the B embedding. 50% of the time B is the actual next sentence that follows A and 50% of the time it is a random sentence, which is done for the “next sentence prediction” task. They are sampled such that the combined length is ≤ 512 tokens. The LM masking is applied after WordPiece tokenization with a uniform masking rate of 15%, and no special consideration given to partial word pieces.\nWe train with batch size of 256 sequences (256 sequences * 512 tokens = 128,000 tokens/batch) for 1,000,000 steps, which is approximately 40\nepochs over the 3.3 billion word corpus. We use Adam with learning rate of 1e-4, β1 = 0.9, β2 = 0.999, L2 weight decay of 0.01, learning rate warmup over the first 10,000 steps, and linear decay of the learning rate. We use a dropout probability of 0.1 on all layers. We use a gelu activation (Hendrycks and Gimpel, 2016) rather than the standard relu, following OpenAI GPT. The training loss is the sum of the mean masked LM likelihood and the mean next sentence prediction likelihood.\nTraining of BERTBASE was performed on 4 Cloud TPUs in Pod configuration (16 TPU chips total).13 Training of BERTLARGE was performed on 16 Cloud TPUs (64 TPU chips total). Each pretraining took 4 days to complete.\nLonger sequences are disproportionately expensive because attention is quadratic to the sequence length. To speed up pretraing in our experiments, we pre-train the model with sequence length of 128 for 90% of the steps. Then, we train the rest 10% of the steps of sequence of 512 to learn the positional embeddings.\nA.3 Fine-tuning Procedure\nFor fine-tuning, most model hyperparameters are the same as in pre-training, with the exception of the batch size, learning rate, and number of training epochs. The dropout probability was always kept at 0.1. The optimal hyperparameter values are task-specific, but we found the following range of possible values to work well across all tasks:\n• Batch size: 16, 32 13https://cloudplatform.googleblog.com/2018/06/Cloud-\nTPU-now-offers-preemptible-pricing-and-globalavailability.html\n• Learning rate (Adam): 5e-5, 3e-5, 2e-5 • Number of epochs: 2, 3, 4\nWe also observed that large data sets (e.g., 100k+ labeled training examples) were far less sensitive to hyperparameter choice than small data sets. Fine-tuning is typically very fast, so it is reasonable to simply run an exhaustive search over the above parameters and choose the model that performs best on the development set.\nA.4 Comparison of BERT, ELMo ,and OpenAI GPT\nHere we studies the differences in recent popular representation learning models including ELMo, OpenAI GPT and BERT. The comparisons between the model architectures are shown visually in Figure 3. Note that in addition to the architecture differences, BERT and OpenAI GPT are finetuning approaches, while ELMo is a feature-based approach.\nThe most comparable existing pre-training method to BERT is OpenAI GPT, which trains a left-to-right Transformer LM on a large text corpus. In fact, many of the design decisions in BERT were intentionally made to make it as close to GPT as possible so that the two methods could be minimally compared. The core argument of this work is that the bi-directionality and the two pretraining tasks presented in Section 3.1 account for the majority of the empirical improvements, but we do note that there are several other differences between how BERT and GPT were trained:\n• GPT is trained on the BooksCorpus (800M words); BERT is trained on the BooksCorpus (800M words) and Wikipedia (2,500M words).\n• GPT uses a sentence separator ([SEP]) and classifier token ([CLS]) which are only introduced at fine-tuning time; BERT learns [SEP], [CLS] and sentence A/B embeddings during pre-training.\n• GPT was trained for 1M steps with a batch size of 32,000 words; BERT was trained for 1M steps with a batch size of 128,000 words.\n• GPT used the same learning rate of 5e-5 for all fine-tuning experiments; BERT chooses a task-specific fine-tuning learning rate which performs the best on the development set.\nTo isolate the effect of these differences, we perform ablation experiments in Section 5.1 which demonstrate that the majority of the improvements are in fact coming from the two pre-training tasks and the bidirectionality they enable.\nA.5 Illustrations of Fine-tuning on Different Tasks\nThe illustration of fine-tuning BERT on different tasks can be seen in Figure 4. Our task-specific models are formed by incorporating BERT with one additional output layer, so a minimal number of parameters need to be learned from scratch. Among the tasks, (a) and (b) are sequence-level tasks while (c) and (d) are token-level tasks. In the figure, E represents the input embedding, Ti represents the contextual representation of token i, [CLS] is the special symbol for classification output, and [SEP] is the special symbol to separate non-consecutive token sequences."},{"heading":"B Detailed Experimental Setup","text":"B.1 Detailed Descriptions for the GLUE Benchmark Experiments.\nOur GLUE results in Table1 are obtained from https://gluebenchmark.com/ leaderboard and https://blog. openai.com/language-unsupervised. The GLUE benchmark includes the following datasets, the descriptions of which were originally summarized in Wang et al. (2018a):\nMNLI Multi-Genre Natural Language Inference is a large-scale, crowdsourced entailment classification task (Williams et al., 2018). Given a pair of sentences, the goal is to predict whether the second sentence is an entailment, contradiction, or neutral with respect to the first one.\nQQP Quora Question Pairs is a binary classification task where the goal is to determine if two questions asked on Quora are semantically equivalent (Chen et al., 2018).\nQNLI Question Natural Language Inference is a version of the Stanford Question Answering Dataset (Rajpurkar et al., 2016) which has been converted to a binary classification task (Wang et al., 2018a). The positive examples are (question, sentence) pairs which do contain the correct answer, and the negative examples are (question, sentence) from the same paragraph which do not contain the answer.\nSST-2 The Stanford Sentiment Treebank is a binary single-sentence classification task consisting of sentences extracted from movie reviews with human annotations of their sentiment (Socher et al., 2013).\nCoLA The Corpus of Linguistic Acceptability is a binary single-sentence classification task, where the goal is to predict whether an English sentence is linguistically “acceptable” or not (Warstadt et al., 2018).\nSTS-B The Semantic Textual Similarity Benchmark is a collection of sentence pairs drawn from news headlines and other sources (Cer et al., 2017). They were annotated with a score from 1 to 5 denoting how similar the two sentences are in terms of semantic meaning.\nMRPC Microsoft Research Paraphrase Corpus consists of sentence pairs automatically extracted from online news sources, with human annotations\nfor whether the sentences in the pair are semantically equivalent (Dolan and Brockett, 2005).\nRTE Recognizing Textual Entailment is a binary entailment task similar to MNLI, but with much less training data (Bentivogli et al., 2009).14\nWNLI Winograd NLI is a small natural language inference dataset (Levesque et al., 2011). The GLUE webpage notes that there are issues with the construction of this dataset, 15 and every trained system that’s been submitted to GLUE has performed worse than the 65.1 baseline accuracy of predicting the majority class. We therefore exclude this set to be fair to OpenAI GPT. For our GLUE submission, we always predicted the ma-\n14Note that we only report single-task fine-tuning results in this paper. A multitask fine-tuning approach could potentially push the performance even further. For example, we did observe substantial improvements on RTE from multitask training with MNLI.\n15https://gluebenchmark.com/faq\njority class."},{"heading":"C Additional Ablation Studies","text":"C.1 Effect of Number of Training Steps\nFigure 5 presents MNLI Dev accuracy after finetuning from a checkpoint that has been pre-trained for k steps. This allows us to answer the following questions:\n1. Question: Does BERT really need such a large amount of pre-training (128,000 words/batch * 1,000,000 steps) to achieve high fine-tuning accuracy? Answer: Yes, BERTBASE achieves almost 1.0% additional accuracy on MNLI when trained on 1M steps compared to 500k steps.\n2. Question: Does MLM pre-training converge slower than LTR pre-training, since only 15% of words are predicted in each batch rather than every word? Answer: The MLM model does converge slightly slower than the LTR model. However, in terms of absolute accuracy the MLM model begins to outperform the LTR model almost immediately.\nC.2 Ablation for Different Masking Procedures\nIn Section 3.1, we mention that BERT uses a mixed strategy for masking the target tokens when pre-training with the masked language model (MLM) objective. The following is an ablation study to evaluate the effect of different masking strategies.\nNote that the purpose of the masking strategies is to reduce the mismatch between pre-training and fine-tuning, as the [MASK] symbol never appears during the fine-tuning stage. We report the Dev results for both MNLI and NER. For NER, we report both fine-tuning and feature-based approaches, as we expect the mismatch will be amplified for the feature-based approach as the model will not have the chance to adjust the representations.\nThe results are presented in Table 8. In the table, MASK means that we replace the target token with the [MASK] symbol for MLM; SAME means that we keep the target token as is; RND means that we replace the target token with another random token.\nThe numbers in the left part of the table represent the probabilities of the specific strategies used during MLM pre-training (BERT uses 80%, 10%, 10%). The right part of the paper represents the Dev set results. For the feature-based approach, we concatenate the last 4 layers of BERT as the features, which was shown to be the best approach in Section 5.3.\nFrom the table it can be seen that fine-tuning is surprisingly robust to different masking strategies. However, as expected, using only the MASK strategy was problematic when applying the featurebased approach to NER. Interestingly, using only the RND strategy performs much worse than our strategy as well."}],"references":[{"title":"Contextual string embeddings for sequence labeling","author":["Alan Akbik","Duncan Blythe","Roland Vollgraf."],"venue":"Proceedings of the 27th International Conference on Computational Linguistics, pages 1638–1649.","citeRegEx":"Akbik et al\\.,? 2018","shortCiteRegEx":"Akbik et al\\.","year":2018},{"title":"Character-level language modeling with deeper self-attention","author":["Rami Al-Rfou","Dokook Choe","Noah Constant","Mandy Guo","Llion Jones."],"venue":"arXiv preprint arXiv:1808.04444.","citeRegEx":"Al.Rfou et al\\.,? 2018","shortCiteRegEx":"Al.Rfou et al\\.","year":2018},{"title":"A framework for learning predictive structures from multiple tasks and unlabeled data","author":["Rie Kubota Ando","Tong Zhang."],"venue":"Journal of Machine Learning Research, 6(Nov):1817–1853.","citeRegEx":"Ando and Zhang.,? 2005","shortCiteRegEx":"Ando and Zhang.","year":2005},{"title":"The fifth PASCAL recognizing textual entailment challenge","author":["Luisa Bentivogli","Bernardo Magnini","Ido Dagan","Hoa Trang Dang","Danilo Giampiccolo."],"venue":"TAC. NIST.","citeRegEx":"Bentivogli et al\\.,? 2009","shortCiteRegEx":"Bentivogli et al\\.","year":2009},{"title":"Domain adaptation with structural correspondence learning","author":["John Blitzer","Ryan McDonald","Fernando Pereira."],"venue":"Proceedings of the 2006 conference on empirical methods in natural language processing, pages 120–128. Association for Computa-","citeRegEx":"Blitzer et al\\.,? 2006","shortCiteRegEx":"Blitzer et al\\.","year":2006},{"title":"A large annotated corpus for learning natural language inference","author":["Samuel R. Bowman","Gabor Angeli","Christopher Potts","Christopher D. Manning."],"venue":"EMNLP. Association for Computational Linguistics.","citeRegEx":"Bowman et al\\.,? 2015","shortCiteRegEx":"Bowman et al\\.","year":2015},{"title":"Class-based n-gram models of natural language","author":["Peter F Brown","Peter V Desouza","Robert L Mercer","Vincent J Della Pietra","Jenifer C Lai."],"venue":"Computational linguistics, 18(4):467–479.","citeRegEx":"Brown et al\\.,? 1992","shortCiteRegEx":"Brown et al\\.","year":1992},{"title":"Semeval-2017 task 1: Semantic textual similarity multilingual and crosslingual focused evaluation","author":["Daniel Cer","Mona Diab","Eneko Agirre","Inigo LopezGazpio","Lucia Specia."],"venue":"Proceedings of the 11th International Workshop on Semantic","citeRegEx":"Cer et al\\.,? 2017","shortCiteRegEx":"Cer et al\\.","year":2017},{"title":"One billion word benchmark for measuring progress in statistical language modeling","author":["Ciprian Chelba","Tomas Mikolov","Mike Schuster","Qi Ge","Thorsten Brants","Phillipp Koehn","Tony Robinson."],"venue":"arXiv preprint arXiv:1312.3005.","citeRegEx":"Chelba et al\\.,? 2013","shortCiteRegEx":"Chelba et al\\.","year":2013},{"title":"Simple and effective multi-paragraph reading comprehension","author":["Christopher Clark","Matt Gardner."],"venue":"ACL.","citeRegEx":"Clark and Gardner.,? 2018","shortCiteRegEx":"Clark and Gardner.","year":2018},{"title":"Semi-supervised sequence modeling with cross-view training","author":["Kevin Clark","Minh-Thang Luong","Christopher D Manning","Quoc Le."],"venue":"Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 1914–","citeRegEx":"Clark et al\\.,? 2018","shortCiteRegEx":"Clark et al\\.","year":2018},{"title":"A unified architecture for natural language processing: Deep neural networks with multitask learning","author":["Ronan Collobert","Jason Weston."],"venue":"Proceedings of the 25th international conference on Machine learning, pages 160–167. ACM.","citeRegEx":"Collobert and Weston.,? 2008","shortCiteRegEx":"Collobert and Weston.","year":2008},{"title":"Supervised learning of universal sentence representations from natural language inference data","author":["Alexis Conneau","Douwe Kiela","Holger Schwenk","Loı̈c Barrault","Antoine Bordes"],"venue":"In Proceedings of the 2017 Conference on Empirical Methods in Nat-","citeRegEx":"Conneau et al\\.,? \\Q2017\\E","shortCiteRegEx":"Conneau et al\\.","year":2017},{"title":"Semi-supervised sequence learning","author":["Andrew M Dai","Quoc V Le."],"venue":"Advances in neural information processing systems, pages 3079–3087.","citeRegEx":"Dai and Le.,? 2015","shortCiteRegEx":"Dai and Le.","year":2015},{"title":"ImageNet: A Large-Scale Hierarchical Image Database","author":["J. Deng","W. Dong","R. Socher","L.-J. Li","K. Li","L. FeiFei."],"venue":"CVPR09.","citeRegEx":"Deng et al\\.,? 2009","shortCiteRegEx":"Deng et al\\.","year":2009},{"title":"Automatically constructing a corpus of sentential paraphrases","author":["William B Dolan","Chris Brockett."],"venue":"Proceedings of the Third International Workshop on Paraphrasing (IWP2005).","citeRegEx":"Dolan and Brockett.,? 2005","shortCiteRegEx":"Dolan and Brockett.","year":2005},{"title":"Maskgan: Better text generation via filling in the","author":["William Fedus","Ian Goodfellow","Andrew M Dai."],"venue":"arXiv preprint arXiv:1801.07736.","citeRegEx":"Fedus et al\\.,? 2018","shortCiteRegEx":"Fedus et al\\.","year":2018},{"title":"Bridging nonlinearities and stochastic regularizers with gaussian error linear units","author":["Dan Hendrycks","Kevin Gimpel."],"venue":"CoRR, abs/1606.08415.","citeRegEx":"Hendrycks and Gimpel.,? 2016","shortCiteRegEx":"Hendrycks and Gimpel.","year":2016},{"title":"Learning distributed representations of sentences from unlabelled data","author":["Felix Hill","Kyunghyun Cho","Anna Korhonen."],"venue":"Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human","citeRegEx":"Hill et al\\.,? 2016","shortCiteRegEx":"Hill et al\\.","year":2016},{"title":"Universal language model fine-tuning for text classification","author":["Jeremy Howard","Sebastian Ruder."],"venue":"ACL. Association for Computational Linguistics.","citeRegEx":"Howard and Ruder.,? 2018","shortCiteRegEx":"Howard and Ruder.","year":2018},{"title":"Reinforced mnemonic reader for machine reading comprehension","author":["Minghao Hu","Yuxing Peng","Zhen Huang","Xipeng Qiu","Furu Wei","Ming Zhou."],"venue":"IJCAI.","citeRegEx":"Hu et al\\.,? 2018","shortCiteRegEx":"Hu et al\\.","year":2018},{"title":"Discourse-based objectives for fast unsupervised sentence representation learning","author":["Yacine Jernite","Samuel R. Bowman","David Sontag."],"venue":"CoRR, abs/1705.00557.","citeRegEx":"Jernite et al\\.,? 2017","shortCiteRegEx":"Jernite et al\\.","year":2017},{"title":"Triviaqa: A large scale distantly supervised challenge dataset for reading comprehension","author":["Mandar Joshi","Eunsol Choi","Daniel S Weld","Luke Zettlemoyer."],"venue":"ACL.","citeRegEx":"Joshi et al\\.,? 2017","shortCiteRegEx":"Joshi et al\\.","year":2017},{"title":"Skip-thought vectors","author":["Ryan Kiros","Yukun Zhu","Ruslan R Salakhutdinov","Richard Zemel","Raquel Urtasun","Antonio Torralba","Sanja Fidler."],"venue":"Advances in neural information processing systems, pages 3294–3302.","citeRegEx":"Kiros et al\\.,? 2015","shortCiteRegEx":"Kiros et al\\.","year":2015},{"title":"Distributed representations of sentences and documents","author":["Quoc Le","Tomas Mikolov."],"venue":"International Conference on Machine Learning, pages 1188–1196.","citeRegEx":"Le and Mikolov.,? 2014","shortCiteRegEx":"Le and Mikolov.","year":2014},{"title":"The winograd schema challenge","author":["Hector J Levesque","Ernest Davis","Leora Morgenstern."],"venue":"Aaai spring symposium: Logical formalizations of commonsense reasoning, volume 46, page 47.","citeRegEx":"Levesque et al\\.,? 2011","shortCiteRegEx":"Levesque et al\\.","year":2011},{"title":"An efficient framework for learning sentence representations","author":["Lajanugen Logeswaran","Honglak Lee."],"venue":"International Conference on Learning Representations.","citeRegEx":"Logeswaran and Lee.,? 2018","shortCiteRegEx":"Logeswaran and Lee.","year":2018},{"title":"Learned in translation: Contextualized word vectors","author":["Bryan McCann","James Bradbury","Caiming Xiong","Richard Socher."],"venue":"NIPS.","citeRegEx":"McCann et al\\.,? 2017","shortCiteRegEx":"McCann et al\\.","year":2017},{"title":"context2vec: Learning generic context embedding with bidirectional LSTM","author":["Oren Melamud","Jacob Goldberger","Ido Dagan."],"venue":"CoNLL.","citeRegEx":"Melamud et al\\.,? 2016","shortCiteRegEx":"Melamud et al\\.","year":2016},{"title":"Distributed representations of words and phrases and their compositionality","author":["Tomas Mikolov","Ilya Sutskever","Kai Chen","Greg S Corrado","Jeff Dean."],"venue":"Advances in Neural Information Processing Systems 26, pages 3111–3119. Curran Associates,","citeRegEx":"Mikolov et al\\.,? 2013","shortCiteRegEx":"Mikolov et al\\.","year":2013},{"title":"A scalable hierarchical distributed language model","author":["Andriy Mnih","Geoffrey E Hinton."],"venue":"D. Koller, D. Schuurmans, Y. Bengio, and L. Bottou, editors, Advances in Neural Information Processing Systems 21, pages 1081–1088. Curran As-","citeRegEx":"Mnih and Hinton.,? 2009","shortCiteRegEx":"Mnih and Hinton.","year":2009},{"title":"A decomposable attention model for natural language inference","author":["Ankur P Parikh","Oscar Täckström","Dipanjan Das","Jakob Uszkoreit."],"venue":"EMNLP.","citeRegEx":"Parikh et al\\.,? 2016","shortCiteRegEx":"Parikh et al\\.","year":2016},{"title":"Glove: Global vectors for word representation","author":["Jeffrey Pennington","Richard Socher","Christopher D. Manning."],"venue":"Empirical Methods in Natural Language Processing (EMNLP), pages 1532– 1543.","citeRegEx":"Pennington et al\\.,? 2014","shortCiteRegEx":"Pennington et al\\.","year":2014},{"title":"Semi-supervised sequence tagging with bidirectional language models","author":["Matthew Peters","Waleed Ammar","Chandra Bhagavatula","Russell Power."],"venue":"ACL.","citeRegEx":"Peters et al\\.,? 2017","shortCiteRegEx":"Peters et al\\.","year":2017},{"title":"Deep contextualized word representations","author":["Matthew Peters","Mark Neumann","Mohit Iyyer","Matt Gardner","Christopher Clark","Kenton Lee","Luke Zettlemoyer."],"venue":"NAACL.","citeRegEx":"Peters et al\\.,? 2018a","shortCiteRegEx":"Peters et al\\.","year":2018},{"title":"Dissecting contextual word embeddings: Architecture and representation","author":["Matthew Peters","Mark Neumann","Luke Zettlemoyer","Wen-tau Yih."],"venue":"Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages","citeRegEx":"Peters et al\\.,? 2018b","shortCiteRegEx":"Peters et al\\.","year":2018},{"title":"Improving language understanding with unsupervised learning","author":["Alec Radford","Karthik Narasimhan","Tim Salimans","Ilya Sutskever."],"venue":"Technical report, OpenAI.","citeRegEx":"Radford et al\\.,? 2018","shortCiteRegEx":"Radford et al\\.","year":2018},{"title":"Squad: 100,000+ questions for machine comprehension of text","author":["Pranav Rajpurkar","Jian Zhang","Konstantin Lopyrev","Percy Liang."],"venue":"Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 2383–2392.","citeRegEx":"Rajpurkar et al\\.,? 2016","shortCiteRegEx":"Rajpurkar et al\\.","year":2016},{"title":"Bidirectional attention flow for machine comprehension","author":["Minjoon Seo","Aniruddha Kembhavi","Ali Farhadi","Hannaneh Hajishirzi."],"venue":"ICLR.","citeRegEx":"Seo et al\\.,? 2017","shortCiteRegEx":"Seo et al\\.","year":2017},{"title":"Recursive deep models for semantic compositionality over a sentiment treebank","author":["Richard Socher","Alex Perelygin","Jean Wu","Jason Chuang","Christopher D Manning","Andrew Ng","Christopher Potts."],"venue":"Proceedings of the 2013 conference on","citeRegEx":"Socher et al\\.,? 2013","shortCiteRegEx":"Socher et al\\.","year":2013},{"title":"U-net: Machine reading comprehension with unanswerable questions","author":["Fu Sun","Linyang Li","Xipeng Qiu","Yang Liu."],"venue":"arXiv preprint arXiv:1810.06638.","citeRegEx":"Sun et al\\.,? 2018","shortCiteRegEx":"Sun et al\\.","year":2018},{"title":"Cloze procedure: A new tool for measuring readability","author":["Wilson L Taylor."],"venue":"Journalism Bulletin, 30(4):415–433.","citeRegEx":"Taylor.,? 1953","shortCiteRegEx":"Taylor.","year":1953},{"title":"Introduction to the conll-2003 shared task: Language-independent named entity recognition","author":["Erik F Tjong Kim Sang","Fien De Meulder."],"venue":"CoNLL.","citeRegEx":"Sang and Meulder.,? 2003","shortCiteRegEx":"Sang and Meulder.","year":2003},{"title":"Word representations: A simple and general method for semi-supervised learning","author":["Joseph Turian","Lev Ratinov","Yoshua Bengio."],"venue":"Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, ACL ’10, pages 384–394.","citeRegEx":"Turian et al\\.,? 2010","shortCiteRegEx":"Turian et al\\.","year":2010},{"title":"Attention is all you need","author":["Ashish Vaswani","Noam Shazeer","Niki Parmar","Jakob Uszkoreit","Llion Jones","Aidan N Gomez","Lukasz Kaiser","Illia Polosukhin."],"venue":"Advances in Neural Information Processing Systems, pages 6000–6010.","citeRegEx":"Vaswani et al\\.,? 2017","shortCiteRegEx":"Vaswani et al\\.","year":2017},{"title":"Extracting and composing robust features with denoising autoencoders","author":["Pascal Vincent","Hugo Larochelle","Yoshua Bengio","Pierre-Antoine Manzagol."],"venue":"Proceedings of the 25th international conference on Machine learning, pages 1096–1103.","citeRegEx":"Vincent et al\\.,? 2008","shortCiteRegEx":"Vincent et al\\.","year":2008},{"title":"2018a. Glue: A multi-task benchmark and analysis platform","author":["Alex Wang","Amanpreet Singh","Julian Michael","Felix Hill","Omer Levy","Samuel Bowman"],"venue":null,"citeRegEx":"Wang et al\\.,? \\Q2018\\E","shortCiteRegEx":"Wang et al\\.","year":2018},{"title":"Multigranularity hierarchical attention fusion networks for reading comprehension and question answering","author":["Wei Wang","Ming Yan","Chen Wu."],"venue":"Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 1:","citeRegEx":"Wang et al\\.,? 2018b","shortCiteRegEx":"Wang et al\\.","year":2018},{"title":"Neural network acceptability judgments","author":["Alex Warstadt","Amanpreet Singh","Samuel R Bowman."],"venue":"arXiv preprint arXiv:1805.12471.","citeRegEx":"Warstadt et al\\.,? 2018","shortCiteRegEx":"Warstadt et al\\.","year":2018},{"title":"A broad-coverage challenge corpus for sentence understanding through inference","author":["Adina Williams","Nikita Nangia","Samuel R Bowman."],"venue":"NAACL.","citeRegEx":"Williams et al\\.,? 2018","shortCiteRegEx":"Williams et al\\.","year":2018},{"title":"How transferable are features in deep neural networks","author":["Jason Yosinski","Jeff Clune","Yoshua Bengio","Hod Lipson"],"venue":"In Advances in neural information processing systems,","citeRegEx":"Yosinski et al\\.,? \\Q2014\\E","shortCiteRegEx":"Yosinski et al\\.","year":2014},{"title":"QANet: Combining local convolution with global self-attention for reading comprehension","author":["Adams Wei Yu","David Dohan","Minh-Thang Luong","Rui Zhao","Kai Chen","Mohammad Norouzi","Quoc V Le."],"venue":"ICLR.","citeRegEx":"Yu et al\\.,? 2018","shortCiteRegEx":"Yu et al\\.","year":2018},{"title":"Swag: A large-scale adversarial dataset for grounded commonsense inference","author":["Rowan Zellers","Yonatan Bisk","Roy Schwartz","Yejin Choi."],"venue":"Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing (EMNLP).","citeRegEx":"Zellers et al\\.,? 2018","shortCiteRegEx":"Zellers et al\\.","year":2018},{"title":"Aligning books and movies: Towards story-like visual explanations by watching movies and reading books","author":["Yukun Zhu","Ryan Kiros","Rich Zemel","Ruslan Salakhutdinov","Raquel Urtasun","Antonio Torralba","Sanja Fidler."],"venue":"Proceedings of the IEEE","citeRegEx":"Zhu et al\\.,? 2015","shortCiteRegEx":"Zhu et al\\.","year":2015}],"referenceMentions":[{"referenceID":34,"context":"Unlike recent language representation models (Peters et al., 2018a; Radford et al., 2018), BERT is designed to pretrain deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers.","startOffset":45,"endOffset":89},{"referenceID":36,"context":"Unlike recent language representation models (Peters et al., 2018a; Radford et al., 2018), BERT is designed to pretrain deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers.","startOffset":45,"endOffset":89},{"referenceID":13,"context":"Language model pre-training has been shown to be effective for improving many natural language processing tasks (Dai and Le, 2015; Peters et al., 2018a; Radford et al., 2018; Howard and Ruder, 2018).","startOffset":112,"endOffset":198},{"referenceID":34,"context":"Language model pre-training has been shown to be effective for improving many natural language processing tasks (Dai and Le, 2015; Peters et al., 2018a; Radford et al., 2018; Howard and Ruder, 2018).","startOffset":112,"endOffset":198},{"referenceID":36,"context":"Language model pre-training has been shown to be effective for improving many natural language processing tasks (Dai and Le, 2015; Peters et al., 2018a; Radford et al., 2018; Howard and Ruder, 2018).","startOffset":112,"endOffset":198},{"referenceID":19,"context":"Language model pre-training has been shown to be effective for improving many natural language processing tasks (Dai and Le, 2015; Peters et al., 2018a; Radford et al., 2018; Howard and Ruder, 2018).","startOffset":112,"endOffset":198},{"referenceID":5,"context":"These include sentence-level tasks such as natural language inference (Bowman et al., 2015; Williams et al., 2018) and paraphrasing (Dolan and Brockett, 2005), which aim to predict the relationships between sentences by analyzing them holistically, as well as token-level tasks such as named entity recognition and question answering, where models are required to produce fine-grained output at the token level (Tjong Kim Sang and De Meulder, 2003; Rajpurkar et al.","startOffset":70,"endOffset":114},{"referenceID":49,"context":"These include sentence-level tasks such as natural language inference (Bowman et al., 2015; Williams et al., 2018) and paraphrasing (Dolan and Brockett, 2005), which aim to predict the relationships between sentences by analyzing them holistically, as well as token-level tasks such as named entity recognition and question answering, where models are required to produce fine-grained output at the token level (Tjong Kim Sang and De Meulder, 2003; Rajpurkar et al.","startOffset":70,"endOffset":114},{"referenceID":15,"context":", 2018) and paraphrasing (Dolan and Brockett, 2005), which aim to predict the relationships between sentences by analyzing them holistically, as well as token-level tasks such as named entity recognition and question answering, where models are required to produce fine-grained output at the token level (Tjong Kim Sang and De Meulder, 2003; Rajpurkar et al.","startOffset":25,"endOffset":51},{"referenceID":37,"context":", 2018) and paraphrasing (Dolan and Brockett, 2005), which aim to predict the relationships between sentences by analyzing them holistically, as well as token-level tasks such as named entity recognition and question answering, where models are required to produce fine-grained output at the token level (Tjong Kim Sang and De Meulder, 2003; Rajpurkar et al., 2016).","startOffset":304,"endOffset":365},{"referenceID":34,"context":"The feature-based approach, such as ELMo (Peters et al., 2018a), uses task-specific architectures that include the pre-trained representations as additional features.","startOffset":41,"endOffset":63},{"referenceID":36,"context":"The fine-tuning approach, such as the Generative Pre-trained Transformer (OpenAI GPT) (Radford et al., 2018), introduces minimal task-specific parameters, and is trained on the downstream tasks by simply fine-tuning all pretrained parameters.","startOffset":86,"endOffset":108},{"referenceID":44,"context":"For example, in OpenAI GPT, the authors use a left-toright architecture, where every token can only attend to previous tokens in the self-attention layers of the Transformer (Vaswani et al., 2017).","startOffset":174,"endOffset":196},{"referenceID":41,"context":"BERT alleviates the previously mentioned unidirectionality constraint by using a “masked language model” (MLM) pre-training objective, inspired by the Cloze task (Taylor, 1953).","startOffset":162,"endOffset":176},{"referenceID":6,"context":"Learning widely applicable representations of words has been an active area of research for decades, including non-neural (Brown et al., 1992; Ando and Zhang, 2005; Blitzer et al., 2006) and neural (Mikolov et al.","startOffset":122,"endOffset":186},{"referenceID":2,"context":"Learning widely applicable representations of words has been an active area of research for decades, including non-neural (Brown et al., 1992; Ando and Zhang, 2005; Blitzer et al., 2006) and neural (Mikolov et al.","startOffset":122,"endOffset":186},{"referenceID":4,"context":"Learning widely applicable representations of words has been an active area of research for decades, including non-neural (Brown et al., 1992; Ando and Zhang, 2005; Blitzer et al., 2006) and neural (Mikolov et al.","startOffset":122,"endOffset":186},{"referenceID":43,"context":"Pre-trained word embeddings are an integral part of modern NLP systems, offering significant improvements over embeddings learned from scratch (Turian et al., 2010).","startOffset":143,"endOffset":164},{"referenceID":30,"context":"To pretrain word embedding vectors, left-to-right language modeling objectives have been used (Mnih and Hinton, 2009), as well as objectives to discriminate correct from incorrect words in left and right context (Mikolov et al.","startOffset":94,"endOffset":117},{"referenceID":29,"context":"To pretrain word embedding vectors, left-to-right language modeling objectives have been used (Mnih and Hinton, 2009), as well as objectives to discriminate correct from incorrect words in left and right context (Mikolov et al., 2013).","startOffset":212,"endOffset":234},{"referenceID":23,"context":"These approaches have been generalized to coarser granularities, such as sentence embeddings (Kiros et al., 2015; Logeswaran and Lee, 2018) or paragraph embeddings (Le and Mikolov, 2014).","startOffset":93,"endOffset":139},{"referenceID":26,"context":"These approaches have been generalized to coarser granularities, such as sentence embeddings (Kiros et al., 2015; Logeswaran and Lee, 2018) or paragraph embeddings (Le and Mikolov, 2014).","startOffset":93,"endOffset":139},{"referenceID":24,"context":", 2015; Logeswaran and Lee, 2018) or paragraph embeddings (Le and Mikolov, 2014).","startOffset":58,"endOffset":80},{"referenceID":21,"context":"To train sentence representations, prior work has used objectives to rank candidate next sentences (Jernite et al., 2017; Logeswaran and Lee, 2018), left-to-right generation of next sentence words given a representation of the previous sentence (Kiros et al.","startOffset":99,"endOffset":147},{"referenceID":26,"context":"To train sentence representations, prior work has used objectives to rank candidate next sentences (Jernite et al., 2017; Logeswaran and Lee, 2018), left-to-right generation of next sentence words given a representation of the previous sentence (Kiros et al.","startOffset":99,"endOffset":147},{"referenceID":23,"context":", 2017; Logeswaran and Lee, 2018), left-to-right generation of next sentence words given a representation of the previous sentence (Kiros et al., 2015), or denoising autoencoder derived objectives (Hill et al.","startOffset":131,"endOffset":151},{"referenceID":18,"context":", 2015), or denoising autoencoder derived objectives (Hill et al., 2016).","startOffset":53,"endOffset":72},{"referenceID":34,"context":"When integrating contextual word embeddings with existing task-specific architectures, ELMo advances the state of the art for several major NLP benchmarks (Peters et al., 2018a) including question answering (Rajpurkar et al.","startOffset":155,"endOffset":177},{"referenceID":37,"context":", 2018a) including question answering (Rajpurkar et al., 2016), sentiment analysis (Socher et al.","startOffset":38,"endOffset":62},{"referenceID":39,"context":", 2016), sentiment analysis (Socher et al., 2013), and named entity recognition (Tjong Kim Sang and De Meulder, 2003).","startOffset":28,"endOffset":49},{"referenceID":11,"context":"As with the feature-based approaches, the first works in this direction only pre-trained word embedding parameters from unlabeled text (Collobert and Weston, 2008).","startOffset":135,"endOffset":163},{"referenceID":13,"context":"More recently, sentence or document encoders which produce contextual token representations have been pre-trained from unlabeled text and fine-tuned for a supervised downstream task (Dai and Le, 2015; Howard and Ruder, 2018; Radford et al., 2018).","startOffset":182,"endOffset":246},{"referenceID":19,"context":"More recently, sentence or document encoders which produce contextual token representations have been pre-trained from unlabeled text and fine-tuned for a supervised downstream task (Dai and Le, 2015; Howard and Ruder, 2018; Radford et al., 2018).","startOffset":182,"endOffset":246},{"referenceID":36,"context":"More recently, sentence or document encoders which produce contextual token representations have been pre-trained from unlabeled text and fine-tuned for a supervised downstream task (Dai and Le, 2015; Howard and Ruder, 2018; Radford et al., 2018).","startOffset":182,"endOffset":246},{"referenceID":36,"context":"At least partly due to this advantage, OpenAI GPT (Radford et al., 2018) achieved previously state-of-the-art results on many sentencelevel tasks from the GLUE benchmark (Wang et al.","startOffset":50,"endOffset":72},{"referenceID":19,"context":"ing and auto-encoder objectives have been used for pre-training such models (Howard and Ruder, 2018; Radford et al., 2018; Dai and Le, 2015).","startOffset":76,"endOffset":140},{"referenceID":36,"context":"ing and auto-encoder objectives have been used for pre-training such models (Howard and Ruder, 2018; Radford et al., 2018; Dai and Le, 2015).","startOffset":76,"endOffset":140},{"referenceID":13,"context":"ing and auto-encoder objectives have been used for pre-training such models (Howard and Ruder, 2018; Radford et al., 2018; Dai and Le, 2015).","startOffset":76,"endOffset":140},{"referenceID":12,"context":"There has also been work showing effective transfer from supervised tasks with large datasets, such as natural language inference (Conneau et al., 2017) and machine translation (McCann et al.","startOffset":130,"endOffset":152},{"referenceID":14,"context":"Computer vision research has also demonstrated the importance of transfer learning from large pre-trained models, where an effective recipe is to fine-tune models pre-trained with ImageNet (Deng et al., 2009; Yosinski et al., 2014).","startOffset":189,"endOffset":231},{"referenceID":50,"context":"Computer vision research has also demonstrated the importance of transfer learning from large pre-trained models, where an effective recipe is to fine-tune models pre-trained with ImageNet (Deng et al., 2009; Yosinski et al., 2014).","startOffset":189,"endOffset":231},{"referenceID":41,"context":"We refer to this procedure as a “masked LM” (MLM), although it is often referred to as a Cloze task in the literature (Taylor, 1953).","startOffset":118,"endOffset":132},{"referenceID":45,"context":"In contrast to denoising auto-encoders (Vincent et al., 2008), we only predict the masked words rather than reconstructing the entire input.","startOffset":39,"endOffset":61},{"referenceID":53,"context":"For the pre-training corpus we use the BooksCorpus (800M words) (Zhu et al., 2015) and English Wikipedia (2,500M words).","startOffset":64,"endOffset":82},{"referenceID":8,"context":"It is critical to use a document-level corpus rather than a shuffled sentence-level corpus such as the Billion Word Benchmark (Chelba et al., 2013) in order to extract long contiguous sequences.","startOffset":126,"endOffset":147},{"referenceID":37,"context":"1) is a collection of 100k crowdsourced question/answer pairs (Rajpurkar et al., 2016).","startOffset":62,"endOffset":86},{"referenceID":38,"context":"Table 2 shows top leaderboard entries as well as results from top published systems (Seo et al., 2017; Clark and Gardner, 2018; Peters et al., 2018a; Hu et al., 2018).","startOffset":84,"endOffset":166},{"referenceID":9,"context":"Table 2 shows top leaderboard entries as well as results from top published systems (Seo et al., 2017; Clark and Gardner, 2018; Peters et al., 2018a; Hu et al., 2018).","startOffset":84,"endOffset":166},{"referenceID":34,"context":"Table 2 shows top leaderboard entries as well as results from top published systems (Seo et al., 2017; Clark and Gardner, 2018; Peters et al., 2018a; Hu et al., 2018).","startOffset":84,"endOffset":166},{"referenceID":20,"context":"Table 2 shows top leaderboard entries as well as results from top published systems (Seo et al., 2017; Clark and Gardner, 2018; Peters et al., 2018a; Hu et al., 2018).","startOffset":84,"endOffset":166},{"referenceID":22,"context":"We therefore use modest data augmentation in our system by first fine-tuning on TriviaQA (Joshi et al., 2017) befor fine-tuning on SQuAD.","startOffset":89,"endOffset":109},{"referenceID":40,"context":"The results compared to prior leaderboard entries and top published work (Sun et al., 2018; Wang et al., 2018b) are shown in Table 3, excluding systems that use BERT as one of their components.","startOffset":73,"endOffset":111},{"referenceID":47,"context":"The results compared to prior leaderboard entries and top published work (Sun et al., 2018; Wang et al., 2018b) are shown in Table 3, excluding systems that use BERT as one of their components.","startOffset":73,"endOffset":111},{"referenceID":52,"context":"The Situations With Adversarial Generations (SWAG) dataset contains 113k sentence-pair completion examples that evaluate grounded commonsense inference (Zellers et al., 2018).","startOffset":152,"endOffset":174},{"referenceID":1,"context":"(2017) is (L=6, H=1024, A=16) with 100M parameters for the encoder, and the largest Transformer we have found in the literature is (L=64, H=512, A=2) with 235M parameters (Al-Rfou et al., 2018).","startOffset":171,"endOffset":193}],"year":2019,"abstractText":"We introduce a new language representation model called BERT, which stands for Bidirectional Encoder Representations from Transformers. Unlike recent language representation models (Peters et al., 2018a; Radford et al., 2018), BERT is designed to pretrain deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers. As a result, the pre-trained BERT model can be finetuned with just one additional output layer to create state-of-the-art models for a wide range of tasks, such as question answering and language inference, without substantial taskspecific architecture modifications. BERT is conceptually simple and empirically powerful. It obtains new state-of-the-art results on eleven natural language processing tasks, including pushing the GLUE score to 80.5% (7.7% point absolute improvement), MultiNLI accuracy to 86.7% (4.6% absolute improvement), SQuAD v1.1 question answering Test F1 to 93.2 (1.5 point absolute improvement) and SQuAD v2.0 Test F1 to 83.1 (5.1 point absolute improvement).","creator":"LaTeX with hyperref package"}}
